#将一个数组拆成都是回文的子数组

def get_huiwen(string):
    if len(string) <= 0:
        return 0
    ans = []
    for inx in range(len(string)):
        low, high = 0, inx
        while low < high and low < len(string) and high >= 0 and string[low] == string[high]:
            low += 1
            high -= 1
        if string[low] == string[high]:
            ans.append(inx)
    return ans


import copy as cp
def solution(string, ans, temp_ans):
    if not string:
        return
    if len(string) == 1:
        ans.append(temp_ans + list(string))
        return

    inxs = get_huiwen(string)
    for each in inxs:
        if each + 1 < len(string):
            each_ans = cp.deepcopy(temp_ans)
            each_ans.append(string[:each + 1])
            solution(string[each + 1:], ans, each_ans)

if __name__ == '__main__':
    # string = 'a'
    string = 'aacaba'
    # string = 'aa'
    ans = []
    solution(string, ans, [])
    print(ans)
