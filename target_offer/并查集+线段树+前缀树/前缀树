class Trie:
    def __init__(self):
        self.data = {}
        self.is_word = False


class prefixTree:
    def __init__(self):
        self.root = Trie()

    def insert(self, words):
        node = self.root
        for ch in words:
            # if not in the node, then add into node,else walk to the next node
            child = node.data.get(ch)
            if not child:
                node.data[ch] = Trie()
            node = node.data[ch]
        node.is_word = True

    def start_with(self, prefix):
        node = self.root
        for ch in prefix:
            node = node.data.get(ch)
            if not node:
                return False
        return True

    def get_w(self, prenode, prefix, word_list):
        if prenode.is_word:
            word_list.append(prefix)
        for ch in prenode.data.keys():
            self.get_w(prenode.data.get(ch), prefix + ch, word_list)

    def get_words(self, prefix):
        if not prefix or not self.start_with(prefix):
            return []
        node = self.root
        for ch in prefix:
            node = node.data.get(ch)
        word_list = []
        self.get_w(node, prefix, word_list)
        return word_list


if __name__ == '__main__':
    trie = prefixTree()
    trie.insert("something")
    trie.insert("sobody")
    trie.insert("somebody1")
    trie.insert("somebody3")
    print(trie.get_words('some'))
